#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# reservoirmodel.py - A simple table-lookup model of an oil reservoir
#
__version__   = "1.0.0"
__date__      = "2019.03.18"

import pandas as pd
import numpy as np
#%% Reservoir Model
#res_data = pd.read_csv('reservoir_v2.csv')
#res_MD  = res_data['MD'].values                 # measured depth
#res_TVD = res_data['TVD'].values                # total vertical depth
#res_ROP = res_data['ROP'].values                # rate of penetration
#res_K   = res_data['K'].values                  # permeability
#res_PF  = res_data['Pf'].values                 # formation pressure
#res_EL  = res_data['EffectiveLength'].values    # effective length

#print ('res_MD =', (res_MD,))
#print ('res_TVD =', (res_TVD,))
#print ('res_ROP =', (res_ROP,))
#print ('res_K =', (res_K,))
#print ('res_PF =', (res_PF,))
#print ('res_EL =', (res_EL,))

def res_data():
    
    MD = np.array([    0,  2292,  2364,  2648,  2932,  3216,  3501,  3784,  4069,\
        4353,  4637,  4912,  5204,  5488,  5772,  6057,  6341,  6625,\
        6720,  7002,  7096,  7191,  7475,  7758,  8039,  8321,  8602,\
        8882,  9165,  9444,  9724, 10006, 10288, 10345, 10385, 10416,\
       10447, 10478, 10509, 10541, 10572, 10604, 10634, 10665, 10695,\
       10726, 10758, 10789, 10820, 10851, 10882, 10913, 10945, 10976,\
       11006, 11037, 11068, 11100, 11130, 11161, 11192, 11224, 11255,\
       11286, 11317, 11348, 11365, 11386, 11447, 11478, 11509, 11570,\
       11631, 11692, 11787, 11881, 11976, 12072, 12166, 12261, 12356,\
       12451, 12546, 12641, 12736, 12831, 12926, 13021, 13115, 13210,\
       13304, 13399, 13494, 13589, 13683, 13778, 13873, 13968, 14061,\
       14125, 14156, 14252, 14347, 14441, 14536, 14631, 14726, 14820,\
       14915, 15010, 15105, 15200, 15296, 15390, 15485, 15580, 15675,\
       15770, 15864, 15958, 16053, 16148, 16242, 16338, 16433, 16528,\
       16623, 16719, 16813, 16908, 17003, 17097, 17191, 17286, 17381,\
       17476, 17571, 17666, 17761, 17855, 17950, 18046, 18141, 18236,\
       18331, 18426, 18520, 18615, 18710, 18805, 18899, 18995, 19090,\
       19185, 19280, 19375, 19469, 19564, 19659, 19754, 19850, 19944,\
       20039, 20134, 20228, 20322, 20417, 20512, 20607, 20701, 20744])
    TVD = np.array([    0.  ,  2292.  ,  2364.  ,  2647.98,  2931.96,  3215.93,\
        3500.88,  3783.85,  4068.83,  4352.82,  4636.81,  4911.8 ,\
        5203.77,  5487.71,  5771.58,  6056.44,  6340.28,  6624.13,\
        6719.09,  7000.96,  7094.93,  7189.93,  7473.92,  7756.91,\
        8037.89,  8319.86,  8600.82,  8880.8 ,  9163.77,  9442.74,\
        9722.72, 10004.69, 10286.68, 10343.67, 10383.67, 10414.67,\
       10445.65, 10476.51, 10507.14, 10538.38, 10568.21, 10598.46,\
       10626.12, 10653.91, 10679.95, 10706.  , 10732.11, 10756.47,\
       10779.7 , 10801.82, 10822.73, 10842.31, 10861.13, 10878.  ,\
       10892.93, 10906.81, 10918.89, 10929.44, 10937.88, 10945.29,\
       10951.35, 10956.41, 10960.46, 10963.69, 10966.03, 10967.42,\
       10967.68, 10967.57, 10967.13, 10967.31, 10967.76, 10968.68,\
       10970.26, 10972.59, 10976.16, 10980.45, 10984.72, 10987.64,\
       10988.93, 10989.23, 10990.25, 10991.94, 10993.27, 10993.79,\
       10994.02, 10995.05, 10996.15, 10996.97, 10997.15, 10996.46,\
       10997.24, 10999.43, 11001.98, 11003.87, 11004.65, 11006.69,\
       11009.79, 11012.93, 11016.15, 11017.99, 11018.52, 11018.7 ,\
       11017.61, 11016.37, 11015.28, 11014.24, 11013.19, 11015.04,\
       11019.3 , 11021.76, 11023.04, 11023.93, 11024.47, 11024.88,\
       11026.92, 11029.11, 11028.19, 11026.84, 11028.26, 11030.46,\
       11030.13, 11028.88, 11031.48, 11037.81, 11043.84, 11047.76,\
       11050.97, 11053.99, 11054.41, 11053.29, 11053.15, 11053.37,\
       11053.14, 11052.61, 11052.26, 11053.17, 11055.08, 11057.78,\
       11060.23, 11062.26, 11064.51, 11066.78, 11068.57, 11069.23,\
       11069.15, 11068.62, 11067.99, 11067.79, 11068.04, 11069.35,\
       11072.32, 11074.65, 11075.39, 11075.67, 11075.01, 11075.19,\
       11077.02, 11077.89, 11077.35, 11078.53, 11081.32, 11083.77,\
       11084.79, 11083.97, 11083.59, 11084.66, 11086.37, 11088.14,\
       11089.7 , 11091.52, 11092.58])
    ROP = np.array([ 0.        ,  3.33333333,  3.33333333,  3.33340886,  3.33346976,\
        3.333551  ,  3.33367612,  3.33372977,  3.33375116,  3.33374688,\
        3.33374311,  3.33374053,  3.33377534,  3.33386181,  3.33406109,\
        3.33425805,  3.33446906,  3.33464689,  3.33468787,  3.33481906,\
        3.33484168,  3.33482175,  3.33477857,  3.33473873,  3.33471448,\
        3.33470374,  3.33470548,  3.33468475,  3.33467576,  3.33466787,\
        3.33465001,  3.33464289,  3.33461671,  3.33461931,  3.33461435,\
        3.33461054,  3.3346259 ,  3.33475576,  3.33510387,  3.3358201 ,\
        3.33692085,  3.33856324,  3.34075452,  3.3437535 ,  3.34744503,\
        3.35204937,  3.35751544,  3.36366715,  3.37085836,  3.3790703 ,\
        3.38839817,  3.39895762,  3.41115149,  3.42423748,  3.4382158 ,\
        3.45412961,  3.47176823,  3.49183691,  3.51208303,  3.53432312,\
        3.55794207,  3.58357825,  3.60934918,  3.63603991,  3.66373796,\
        3.69252378,  3.70887975,  3.72958955,  3.79031077,  3.8210001 ,\
        3.85156915,  3.91215202,  3.97263944,  4.03290238,  4.12797738,\
        4.22257446,  4.31963582,  4.42082334,  4.52330592,  4.62971901,\
        4.73685106,  4.84471682,  4.95466061,  5.06734798,  5.1821303 ,\
        5.29747156,  5.41438624,  5.53340733,  5.6538357 ,  5.77867808,\
        5.90166216,  6.02539283,  6.15018684,  6.2777626 ,  6.40757979,\
        6.5383337 ,  6.66887839,  6.80100021,  6.9316695 ,  7.02323165,\
        7.06855456,  7.21298634,  7.36037353,  7.50853151,  7.65996641,\
        7.81334803,  7.96881489,  8.11830046,  8.26583055,  8.41914467,\
        8.57702713,  8.73776114,  8.90305815,  9.06719574,  9.23102024,\
        9.39636115,  9.5716911 ,  9.750359  ,  9.92192317, 10.09330171,\
       10.27555929, 10.46262677, 10.63888018, 10.8100245 , 10.98168527,\
       11.1613561 , 11.34503291, 11.5332694 , 11.72756043, 11.93110778,\
       12.13381079, 12.33543181, 12.54079745, 12.75168963, 12.96432008,\
       13.17480829, 13.38389474, 13.59219473, 13.80347755, 14.01608505,\
       14.23231499, 14.45299241, 14.67532971, 14.90442622, 15.13890276,\
       15.37770454, 15.61692117, 15.85934096, 16.10230126, 16.3430233 ,\
       16.57598458, 16.81924937, 17.0694468 , 17.32423769, 17.58601555,\
       17.84638765, 18.09842828, 18.36033337, 18.63182428, 18.89720086,\
       19.15957139, 19.42016996, 19.69357093, 19.97942168, 20.26264911,\
       20.54049743, 20.82027326, 21.10214809, 21.3876794 , 21.67102841,\
       21.80010312])
    K = np.array([ 1.        ,  0.21815009,  0.21150592,  0.18882318,  0.17053439,\
        0.15547602,  0.14282123,  0.13214054,  0.12288545,  0.11486806,\
        0.10783276,  0.10179568,  0.09608419,  0.09111269,  0.08663139,\
        0.08255675,  0.07886087,  0.07548161,  0.07441484,  0.07141878,\
        0.07047286,  0.06954171, 25.        , 25.        , 25.        ,\
       25.        ,  0.05813399,  0.05630123,  0.0545627 ,  0.05295073,\
        0.05142594,  0.04997656,  0.04860655,  0.04833874,  0.04815253,\
        0.0480092 ,  0.04786682,  0.04772582,  0.04758669,  0.04744562,\
        0.0473117 ,  0.04717667,  0.04705386,  0.04693113,  0.0468167 ,\
        0.04670278,  0.04658916,  0.04648365,  0.04638348,  0.0462885 ,\
        0.04619906,  0.04611563,  0.04603573,  0.04596433,  0.04590133,\
        0.04584292,  0.0457922 ,  0.045748  ,  0.0457127 ,  1.        ,\
        1.        ,  1.        ,  1.        ,  1.        ,  0.04559535,\
        0.04558957,  0.04558849,  0.04558895,  0.04559078,  0.04559003,\
        0.04558816,  0.04558434,  0.04557777,  0.04556809,  0.04555327,\
        0.04553547,  0.04551777,  0.04550568,  0.04550034,  0.04549909,\
        0.04549487,  0.04548788,  0.04548237,  0.04548022,  0.04547927,\
        0.04547501,  0.04547046,  0.04546707,  0.04546633,  0.04546918,\
        0.04546595,  0.0454569 ,  0.04544637,  0.04543856,  0.04543534,\
        0.04542692,  0.04541413,  0.04540118,  0.04538791,  0.04538033,\
        0.04537815,  0.0453774 ,  0.04538189,  0.045387  ,  0.04539149,\
        0.04539578,  0.04540011,  0.04539248,  0.04537493,  0.04536481,\
        0.04535954,  2.        ,  2.        ,  2.        ,  2.        ,\
        2.        ,  2.        ,  2.        ,  2.        ,  2.        ,\
        2.        ,  2.        ,  2.        ,  2.        ,  2.        ,\
        0.04525804,  0.0452449 ,  0.04523254,  0.04523082,  0.0452354 ,\
        0.04523597,  0.04523507,  0.04523601,  0.04523818,  0.04523962,\
        0.04523589,  0.04522808,  0.04521703,  0.04520702,  0.04519872,\
        0.04518953,  0.04518026,  0.04517295,  0.04517026,  0.04517059,\
        0.04517275,  0.04517532,  0.04517614,  0.04517512,  0.04516977,\
        0.04515765,  0.04514815,  0.04514514,  0.045144  ,  0.04514669,\
        0.04514595,  0.04513849,  0.04513495,  0.04513715,  0.04513234,\
        0.04512098,  0.045111  ,  0.04510685,  0.04511019,  0.04511174,\
        0.04510738,  0.04510043,  0.04509323,  0.04508688,  0.04507948,\
        0.04507518])
    PF = np.array([   0.    , 1031.4   , 1063.8   , 1191.591 , 1319.382 , 1447.1685,\
       1575.396 , 1702.7325, 1830.9735, 1958.769 , 2086.5645, 2210.31  ,\
       2341.6965, 2469.4695, 2597.211 , 2725.398 , 2853.126 , 2980.8585,\
       3023.5905, 3150.432 , 3192.7185, 3235.4685, 3363.264 , 3490.6095,\
       3617.0505, 3743.937 , 3870.369 , 3996.36  , 4123.6965, 4249.233 ,\
       4375.224 , 4502.1105, 4629.006 , 4654.6515, 4672.6515, 4686.6015,\
       4700.5425, 4714.4295, 4728.213 , 4742.271 , 4755.6945, 4769.307 ,\
       4781.754 , 7457.737 , 7475.965 , 7494.2   , 7512.477 , 7529.529 ,\
       7545.79  , 7561.274 , 7575.911 , 7589.617 , 7602.791 , 7614.6   ,\
       7625.051 , 7634.767 , 7643.223 , 7650.608 , 7656.516 , 7661.703 ,\
       7665.945 , 7669.487 , 7672.322 , 7674.583 , 7676.221 , 7677.194 ,\
       7677.376 , 7677.299 , 7676.991 , 7677.117 , 7677.432 , 7678.076 ,\
       7679.182 , 7680.813 , 7683.312 , 7686.315 , 7689.304 , 7691.348 ,\
       7692.251 , 7692.461 , 7693.175 , 7694.358 , 7695.289 , 7695.653 ,\
       7695.814 , 7696.535 , 7697.305 , 7697.879 , 7698.005 , 7697.522 ,\
       7698.068 , 7699.601 , 7701.386 , 7702.709 , 7703.255 , 7704.683 ,\
       7706.853 , 7709.051 , 7711.305 , 7712.593 , 7712.964 , 7713.09  ,\
       7712.327 , 7711.459 , 7710.696 , 7709.968 , 7709.233 , 7710.528 ,\
       7713.51  , 7715.232 , 7716.128 , 7716.751 , 7717.129 , 7717.416 ,\
       7718.844 , 7720.377 , 7719.733 , 7718.788 , 7719.782 , 7721.322 ,\
       7721.091 , 7720.216 , 7722.036 , 7726.467 , 7730.688 , 7733.432 ,\
       7735.679 , 7737.793 , 7738.087 , 7737.303 , 7737.205 , 7737.359 ,\
       7737.198 , 7736.827 , 7736.582 , 7737.219 , 7738.556 , 7740.446 ,\
       7742.161 , 7743.582 , 7745.157 , 7746.746 , 7747.999 , 7748.461 ,\
       7748.405 , 7748.034 , 7747.593 , 7747.453 , 7747.628 , 7748.545 ,\
       7750.624 , 7752.255 , 7752.773 , 7752.969 , 7752.507 , 7752.633 ,\
       7753.914 , 7754.523 , 7754.145 , 7754.971 , 7756.924 , 7758.639 ,\
       7759.353 , 7758.779 , 7758.513 , 7759.262 , 7760.459 , 7761.698 ,\
       7762.79  , 7764.064 , 7764.806 ])
    EL = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
    
    return (MD, TVD, ROP, K, PF, EL)


def reservoir_flow(pressure, area, depth):
    """
    Parameters:
        pressure - drill string pressure
        area     - drill string flowing area
        depth    - measured depth of the drill string
    
    Returns:
        Qres - flow in/our of the reservoir
    """
    res_MD, res_TVD, res_ROP, res_K, res_PF, res_EL = res_data()
    k = 0.0
    formation_pressure = 0.0
    effective_length = 1.0

    idx = 0
    max_idx = len(res_MD)
    for idx in range(max_idx-1):
        if depth < res_MD[idx]:
            idx += 1
        else:
            k = res_ROP[idx]
            formation_pressure = res_PF[idx]
            effective_length = res_EL[idx]
            break

    Qres = k * area * (formation_pressure - pressure)/effective_length
    return Qres

def reservoir(depth):
    """
    Parameters:
        depth - the measured depth of the drill string
    
    Returns:
        tvd - total vertical depth
        rop - rate of penetration of the drill
        pf - pressure in the formation
    """
    res_MD, res_TVD, res_ROP, res_K, res_PF, res_EL = res_data()
    tvd = 0
    rop = 0
    pf = 0
    k = 0
    el = 1
    idx = 0
    while idx < len(res_MD)-1 and depth >= res_MD[idx]:
        idx += 1
    
    rop = res_ROP[idx]
    pf = res_PF[idx]
    k = res_K[idx]
    el = res_EL[idx]

    if (idx+1<len(res_MD)):
        tvd_slope = (res_TVD[idx+1]-res_TVD[idx]) / (res_MD[idx+1]-res_MD[idx])
    else:
        tvd_slope = (res_TVD[idx]-res_TVD[idx-1]) / (res_MD[idx]-res_MD[idx-1])
    tvd =  res_TVD[idx] + (depth-res_MD[idx]) * tvd_slope
        
    # Does the model need to return the tvd and pf derivatives as well?
    return (tvd, rop, pf, k, el)

def reservoir_TVD(depth):
    """
    Calling Argument:
        depth - the measured depth of the drill string
    
    Function Returns:
        tvd - total vertical depth
    """
    res_MD, res_TVD, res_ROP, res_K, res_PF, res_EL = res_data()
    tvd = 0
    idx = 0
    while idx < len(res_MD)-1 and depth >= res_MD[idx]:
        idx += 1
    
    if (idx+1<len(res_MD)):
        tvd_slope = (res_TVD[idx+1]-res_TVD[idx]) / (res_MD[idx+1]-res_MD[idx])
    else:
        tvd_slope = (res_TVD[idx]-res_TVD[idx-1]) / (res_MD[idx]-res_MD[idx-1])
    tvd =  res_TVD[idx] + (depth-res_MD[idx]) * tvd_slope
        
    return tvd

def reservoir_dTVD(depth):
    """
    Calling Argument:
        depth - the measured depth of the drill string
    
    Function Returns:
        tvd - derivative of total vertical depth
    """
    res_MD, res_TVD, res_ROP, res_K, res_PF, res_EL = res_data()
    tvd_slope = 1.0
    idx = 0
    while idx < len(res_MD)-1 and depth >= res_MD[idx]:
        idx += 1
    
    if (idx+1<len(res_MD)):
        tvd_slope = (res_TVD[idx+1]-res_TVD[idx]) / (res_MD[idx+1]-res_MD[idx])
    else:
        tvd_slope = (res_TVD[idx]-res_TVD[idx-1]) / (res_MD[idx]-res_MD[idx-1])
    return tvd_slope

def reservoir_ROP(depth):
    """
    Calling Argument:
        depth - the measured depth of the drill string
    
    Function Returns:
        rop - rate of penetration of the drill
    """
    res_MD, res_TVD, res_ROP, res_K, res_PF, res_EL = res_data()
    idx = 0
    while idx < len(res_MD)-1 and depth >= res_MD[idx]:
        idx += 1
    return res_ROP[idx]

def test(pressure, area, depth):
    print('Reservoir variables:')
    tvd, rop, pf, tvds = reservoir(depth)

    print ('measured depth =', depth)
    print ('total vertical depth =', tvd)
    print ('total vertical depth slope =', tvds)
    print ('rate of penetration =', rop)
    print ('formation pressure =', pf)
    
    print ('flow from reservoir =', reservoir_flow(pressure, area, depth))

def main():
    print('     Depth      TVD  slope(TVD)    ROP     Form Pr  Res Flow')
    for d in range(1000, 30000, 1000):
        tvd, rop, pf, tvds = reservoir(d)
        print("{0:10d}{1:10.1f}{2:10.5f}{3:10.5f}{4:10.1f}{5:10.1f}".format( \
              d, reservoir_TVD(d), reservoir_dTVD(d), reservoir_ROP(d), \
              pf, reservoir_flow(1800, 0.11, d) ) )

#%% This is only run whne script is executed as a standalone program
if __name__ == '__main__':
    import sys, os, traceback, argparse
    import time
    #import re
    #from pexpect import run, spawn

    try:
        start_time = time.time()
        parser = argparse.ArgumentParser(description='A simple table-lookup reservoir model')
        parser.add_argument('--version', action='version', version='%(prog)s v'+__version__)
        parser.add_argument ('-v', '--verbose', action='store_true', help='produce verbose output')
        parser.add_argument ('-t', '--test', action='store_true', help='run test suite')
        args = parser.parse_args()
        if args.verbose: print (time.asctime())
        if args.test: 
            test(1850, 4.3125*0.0254, 4000)
        else:
            main()
        if args.verbose: print (time.asctime())
        if args.verbose: print ('Elapsed time:', \
                                (time.time() - start_time), 'seconds')
        sys.exit(0)
    except KeyboardInterrupt as e: # Ctrl-C
        raise e
    except SystemExit as e: # sys.exit()
        raise e
    except Exception as e:
        print ('ERROR, UNEXPECTED EXCEPTION')
        print (str(e))
        traceback.print_exc()
        os._exit(1)
